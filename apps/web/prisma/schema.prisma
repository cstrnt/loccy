// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Example {
    id String @id @default(cuid())
}

enum ROLE {
    ADMIN
    USER
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    projects      ProjectUsers[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Project {
    id       String          @id @default(cuid())
    name     String
    users    ProjectUsers[]
    branches ProjectBranch[]
    apiKeys  ApiKey[]
}

model ProjectUsers {
    user      User    @relation(fields: [userId], references: [id])
    userId    String
    project   Project @relation(fields: [projectId], references: [id])
    projectId String
    role      ROLE

    @@id([userId, projectId])
}

model ProjectBranch {
    id           String        @unique @default(cuid())
    name         String
    project      Project       @relation(fields: [projectId], references: [id])
    projectId    String
    isDefault    Boolean       @default(false)
    locales      Locale[]
    localeKeys   LocaleKey[]
    translations Translation[]

    @@id([name, projectId])
}

model LocaleKey {
    name        String
    description String?
    params      Json
    namespace   String  @default("common")
    index       Int

    Branch          ProjectBranch? @relation(fields: [branchName, branchProjectId], references: [name, projectId])
    branchName      String
    branchProjectId String

    @@id([name, branchName, branchProjectId, namespace])
}

model Locale {
    name      String
    isDefault Boolean  @default(false)
    updatedAt DateTime @updatedAt

    branch       ProjectBranch @relation(fields: [branchId], references: [id])
    branchId     String
    translations Translation[]

    @@id([name, branchId])
}

model Translation {
    key       String
    value     String
    namespace String @default("common")

    branch     ProjectBranch @relation(fields: [branchName, projectId], references: [name, projectId])
    branchName String
    projectId  String

    locale     Locale? @relation(fields: [localeName, branchId], references: [name, branchId])
    localeName String
    branchId   String

    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt
    isAutoTranslated Boolean  @default(false)

    @@id([key, localeName, branchId, namespace])
}

model ApiKey {
    id        String @id @default(cuid())
    name      String
    hashedKey String @unique

    createdAt DateTime @default(now())

    project   Project @relation(fields: [projectId], references: [id])
    projectId String
}
